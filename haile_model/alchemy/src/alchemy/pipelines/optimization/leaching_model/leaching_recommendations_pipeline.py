"""
This is a boilerplate pipeline 'leaching'
generated using Kedro 0.18.7
"""
from kedro.pipeline import Pipeline, node

from alchemy.pipelines.optimization.leaching_model.leaching_recommendations_nodes import (
    classify_operating_modes,
    classify_ore_cluster,
    drop_null,
    get_downstream_recommendations,
    get_historical_baseline_recovery,
    get_incremental_gold_produced,
    impute_na_in_downstream_features,
    map_operating_modes_to_ore_clusters,
)


def get_recommendations(**kwargs) -> Pipeline:
    return Pipeline(
        nodes=[
            node(
                func=impute_na_in_downstream_features,
                inputs=dict(
                    test_data="test_data",
                    median_values_for_tags="median_values_for_tags",
                    td="td",
                    params="params:train_model",
                ),
                outputs="test_data_na_imputed",
                name="impute_na_in_downstream_features_with_median",
            ),
            node(
                func=drop_null,
                inputs=dict(
                    train_data="train_df_processed_with_clusters",
                    test_data="test_data_na_imputed",
                    model_features_first_level_cluster=(
                        "model_features_first_level_cluster"
                    ),
                    model_features_second_level_cluster=(
                        "model_features_second_level_cluster"
                    ),
                    params="params:train_model",
                ),
                outputs=[
                    "train_data_without_nulls",
                    "test_data_without_nulls",
                ],
                name="drop_nulls",
            ),
            node(
                func=classify_ore_cluster,
                inputs=dict(
                    test_data="test_data_without_nulls",
                    first_cluster_trained_model="first_cluster_trained_model",
                    model_features_first_level_cluster=(
                        "model_features_first_level_cluster"
                    ),
                ),
                outputs="test_data_with_ore_clusters",
                name="get_data_with_ore_clusters",
            ),
            node(
                func=map_operating_modes_to_ore_clusters,
                inputs=dict(
                    test_data_without_nulls_all_tags="test_data_without_nulls",
                    test_data="test_data_with_ore_clusters",
                    params="params:train_model",
                    best_modes_per_cluster="best_operating_mode_per_cluster",
                    model_features_second_level_cluster=(
                        "model_features_second_level_cluster"
                    ),
                ),
                outputs=[
                    "test_data_ore_tags_with_clusters",
                    "test_data_all_tags_with_clusters",
                ],
                name="get_ore_clusters_map_best_op_modes_test_data",
            ),
            node(
                func=classify_operating_modes,
                inputs=dict(
                    test_data="test_data_all_tags_with_clusters",
                    second_cluster_trained_models="second_cluster_trained_models",
                    model_features_second_level_cluster=(
                        "model_features_second_level_cluster"
                    ),
                    model_features_second_level_cluster_dict=(
                        "model_features_second_level_cluster_dict"
                    ),
                ),
                outputs="test_data_with_ore_clusters_with_om",
                name="classify_op_modes_in_test_data",
            ),
            node(
                func=get_historical_baseline_recovery,
                inputs=dict(
                    test_data_with_flc_and_slc="test_data_with_ore_clusters_with_om",
                    test_data="test_data_without_nulls",
                    td="td",
                    params="params:train_model",
                    first_cluster_trained_model="flc_trained_model_hist_baseline",
                    second_cluster_trained_models="slc_trained_models_hist_baseline",
                    model_features_first_level_cluster=(
                        "model_features_flc_hist_baseline"
                    ),
                    model_features_second_level_cluster_dict=(
                        "model_features_slc_dict_hist_baseline"
                    ),
                    baseline_historic_upstream_and_downstream=(
                        "baseline_historic_upstream_and_downstream"
                    ),
                ),
                outputs=[
                    "test_data_clusters_hist_baseline_recovery",
                    "test_data_clusters_hist_baseline_recovery_csv",
                ],
                name="get_hist_base_recovery_in_test_data",
            ),
            node(
                func=get_incremental_gold_produced,
                inputs=dict(
                    data="data",
                    data_upstream_optimized="data_upstream_optimized",
                    baseline_tph="baseline_tph",
                    baseline_recovery="test_data_clusters_hist_baseline_recovery",
                    params="params:train_model",
                ),
                outputs="incremental_gold_produced",
                name="get_incremental_gold_produced",
            ),
            node(
                func=get_downstream_recommendations,
                inputs=dict(
                    train_data="train_data_without_nulls",
                    test_data="test_data_clusters_hist_baseline_recovery",
                    td="td",
                    params="params:train_model",
                    best_modes_per_cluster="best_operating_mode_per_cluster",
                    model_features_second_level_cluster_dict=(
                        "model_features_second_level_cluster_dict"
                    ),
                    all_operating_mode_per_cluster="all_operating_mode_per_cluster",
                    incremental_gold_produced="incremental_gold_produced",
                    areas_to_optimize="params:areas_to_optimize",
                ),
                outputs=[
                    "recommendations_cfa",
                    "recommendations_live",
                    "recommendations_live_timestamp",
                    "recommendations_downstream",
                    "predictions",
                ],
                name="get_downstream_recommendations",
            ),
        ]
    ).tag("export")
